from tkinter import *
from tkinter import messagebox
import random

class TicTacToeBot:
    def __init__(self, master):
        self.master = master
        
        # Change the window background color
        self.master.config(bg="#282C34")
        
        # Create a canvas with new background color
        self.game_canvas = Canvas(self.master, bg="#282C34", relief=RAISED, bd=3)
        self.game_canvas.pack(fill=BOTH, expand=1)

        # Tracking positions
        self.bot_positions = []
        self.user_positions = []
        # We no longer need prediction_slots or strategy_type for Minimax
        self.cell_values = {}  # Key = cell index [1..9], Value = 'X' or 'O'
        self.turn_count = 0
        
        # We can keep or remove adjacent_positions if you like â€” not needed by Minimax
        self.adjacent_positions = {
            1: (2,3,4,7),
            2: (1,3),
            3: (1,2,6,9),
            4: (1,7),
            5: (2,4,6,8),
            6: (3,9),
            7: (1,4,8,9),
            8: (7,9),
            9: (7,8,6,3)
        }
        
        self.initialize_board()

    def initialize_board(self):
        # Main Title Label
        Label(
            self.game_canvas, text="Tic-Tac-Toe AI", bg="#282C34",
            fg="#61AFEF", font=("Lato", 25, "bold")
        ).place(x=110, y=10)

        # Button styling
        btn_style = {
            "font": ("Arial", 15, "bold", "italic"),
            "width": 5,
            "bg": "#3C4047",
            "activebackground": "#3C4047",
            "bd": 3,
            "fg": "#ECEFF4",
            "disabledforeground": "#808080"
        }

        # Create 9 buttons for the grid
        self.btn_1 = Button(self.game_canvas, text="", command=lambda: self.user_turn(1), state=DISABLED, **btn_style)
        self.btn_2 = Button(self.game_canvas, text="", command=lambda: self.user_turn(2), state=DISABLED, **btn_style)
        self.btn_3 = Button(self.game_canvas, text="", command=lambda: self.user_turn(3), state=DISABLED, **btn_style)
        self.btn_4 = Button(self.game_canvas, text="", command=lambda: self.user_turn(4), state=DISABLED, **btn_style)
        self.btn_5 = Button(self.game_canvas, text="", command=lambda: self.user_turn(5), state=DISABLED, **btn_style)
        self.btn_6 = Button(self.game_canvas, text="", command=lambda: self.user_turn(6), state=DISABLED, **btn_style)
        self.btn_7 = Button(self.game_canvas, text="", command=lambda: self.user_turn(7), state=DISABLED, **btn_style)
        self.btn_8 = Button(self.game_canvas, text="", command=lambda: self.user_turn(8), state=DISABLED, **btn_style)
        self.btn_9 = Button(self.game_canvas, text="", command=lambda: self.user_turn(9), state=DISABLED, **btn_style)

        # Place the buttons on the canvas
        self.btn_1.place(x=20,  y=100)
        self.btn_2.place(x=190, y=100)
        self.btn_3.place(x=360, y=100)
        self.btn_4.place(x=20,  y=200)
        self.btn_5.place(x=190, y=200)
        self.btn_6.place(x=360, y=200)
        self.btn_7.place(x=20,  y=300)
        self.btn_8.place(x=190, y=300)
        self.btn_9.place(x=360, y=300)

        self.board_buttons = [
            self.btn_1, self.btn_2, self.btn_3,
            self.btn_4, self.btn_5, self.btn_6,
            self.btn_7, self.btn_8, self.btn_9
        ]

        # Button to have Bot go first
        self.bot_first_button = Button(
            self.game_canvas,
            text="Computer vs Player",
            font=("Arial", 15, "bold", "italic"),
            bg="#3C4047",
            activebackground="#3C4047",
            fg="#9d9dff",
            bd=3,
            relief=RAISED,
            command=lambda: self.set_game_mode("bot_first")
        )
        self.bot_first_button.place(x=15, y=380)

        # Button to have Player go first
        self.user_first_button = Button(
            self.game_canvas,
            text="Player vs Computer",
            font=("Arial", 15, "bold", "italic"),
            bg="#3C4047",
            activebackground="#3C4047",
            fg="#9d9dff",
            bd=3,
            relief=RAISED,
            command=self.set_game_mode
        )
        self.user_first_button.place(x=240, y=380)

        # Reset button
        self.reset_button = Button(
            self.game_canvas,
            text="Reset",
            font=("Arial", 15, "bold", "italic"),
            bg="#3C4047",
            activebackground="#3C4047",
            fg="#9d9dff",
            disabledforeground="#808080",
            bd=3,
            relief=RAISED,
            command=self.reset_game,
            state=DISABLED
        )
        self.reset_button.place(x=190, y=440)

    def reset_game(self):
        self.bot_positions.clear()
        self.user_positions.clear()
        self.cell_values.clear()
        self.turn_count = 0
        
        for btn in self.board_buttons:
            btn.config(text="", state=DISABLED)
        
        self.bot_first_button.config(state=NORMAL)
        self.user_first_button.config(state=NORMAL)
        self.reset_button.config(state=DISABLED)

    def end_game_actions(self):
        for btn in self.board_buttons:
            btn.config(state=DISABLED)
        self.reset_button.config(state=NORMAL)

    def set_game_mode(self, mode="user_first"):
        self.bot_first_button.config(state=DISABLED, disabledforeground="#808080")
        self.user_first_button.config(state=DISABLED, disabledforeground="#808080")
        self.reset_button.config(state=DISABLED, disabledforeground="#808080")

        for btn in self.board_buttons:
            btn.config(state=NORMAL)

        if mode == "bot_first":
            self.bot_turn()  # Bot makes first move

    def insert_symbol(self, position, symbol="X"):
        """ Places 'X' (bot) or 'O' (user) in the given position. """
        if symbol == "X":
            # Bot moves (text color = light green)
            self.board_buttons[position - 1].config(text=symbol, state=DISABLED, disabledforeground="#98C379")
        else:
            # User moves (text color = light red)
            self.board_buttons[position - 1].config(text=symbol, state=DISABLED, disabledforeground="#E06C75")
        self.cell_values[position] = symbol

    ###################
    # MINIMAX METHODS #
    ###################
    def is_winner(self, board, symbol):
        """Return True if 'symbol' has won on the given board dictionary."""
        wins = [
            (1,2,3), (4,5,6), (7,8,9),  # rows
            (1,4,7), (2,5,8), (3,6,9),  # columns
            (1,5,9), (3,5,7)            # diagonals
        ]
        for (a,b,c) in wins:
            if board.get(a) == symbol and board.get(b) == symbol and board.get(c) == symbol:
                return True
        return False
    
    def is_draw(self, board):
        """Return True if all 9 cells are filled and there is no winner."""
        if len(board) < 9:
            return False  # Not all cells used
        # Or check if there's no winner but all cells filled
        return not self.is_winner(board, 'X') and not self.is_winner(board, 'O')
    
    def evaluate_score(self, board):
        """Score the board from X's perspective:
           +10 for X winning, -10 for O winning, 0 otherwise."""
        if self.is_winner(board, 'X'):
            return 10
        if self.is_winner(board, 'O'):
            return -10
        return 0  # no winner = 0
    
    def minimax(self, board, depth, is_maximizing):
        """Minimax algorithm that returns the best score for the given board."""
        score = self.evaluate_score(board)
        
        # If there's a winner or a draw, return score
        if score == 10 or score == -10:
            return score
        if self.is_draw(board):
            return 0
        
        if is_maximizing:
            best_score = float('-inf')
            for cell in range(1, 10):
                if cell not in board:  # means empty
                    board[cell] = 'X'  # try X in this cell
                    best_score = max(best_score, self.minimax(board, depth + 1, False))
                    del board[cell]    # undo move
            return best_score
        else:
            best_score = float('inf')
            for cell in range(1, 10):
                if cell not in board:  # means empty
                    board[cell] = 'O'  # try O in this cell
                    best_score = min(best_score, self.minimax(board, depth + 1, True))
                    del board[cell]    # undo move
            return best_score

    def find_best_move(self):
        """Return the cell (1..9) where the bot should move for best outcome."""
        best_score = float('-inf')
        best_move = None
        
        # Try each empty cell
        for cell in range(1, 10):
            if cell not in self.cell_values:  # empty
                self.cell_values[cell] = 'X'
                score = self.minimax(self.cell_values, 0, False)
                del self.cell_values[cell]  # undo
                if score > best_score:
                    best_score = score
                    best_move = cell
        return best_move

    #####################
    # TURN-BASED METHODS
    #####################
    def bot_turn(self):
        """Bot (X) uses Minimax to find the best move."""
        # First, check if user already won or if it's a draw.
        if not self.check_user_win():  # True => user has NOT won yet
            # Find the best move using minimax
            move = self.find_best_move()
            
            # If there's a move, place it
            if move:
                self.turn_count += 1
                self.insert_symbol(move, "X")
                self.bot_positions.append(move)
                self.check_bot_win()
    
    def user_turn(self, position):
        """Called when user clicks on a cell button."""
        self.turn_count += 1
        self.insert_symbol(position, "O")
        self.user_positions.append(position)
        
        # Check if user just won or if it's a draw
        if not self.check_user_win():
            # If user hasn't won yet, let bot move
            if self.turn_count < 9:
                self.bot_turn()

    def check_bot_win(self):
        """Check if bot (X) has a winning line and end the game if so."""
        # We can still reuse the button text approach, or rely on `self.is_winner()`
        bot_won = self.is_winner(self.cell_values, 'X')
        if bot_won:
            messagebox.showinfo("Game Over", "Computer is the winner!")
            self.end_game_actions()
        elif self.turn_count == 9:
            # If board is full and no winner, itâ€™s a draw
            messagebox.showinfo("Game Over", "It's a draw!")
            self.end_game_actions()
    
    def check_user_win(self):
        """Check if the user (O) has a winning line. Return False if user just won or draw."""
        user_won = self.is_winner(self.cell_values, 'O')
        if user_won:
            messagebox.showinfo("Game Over", "You are the winner!")
            self.end_game_actions()
            return True  # user has won => stop
        elif self.turn_count == 9:
            messagebox.showinfo("Game Over", "It's a draw!")
            self.end_game_actions()
            return True  # it's a draw => stop
        return False  # user has not won and no draw

if __name__ == "__main__":
    root = Tk()
    root.title("AI Tic-Tac-Toe (Minimax)")
    root.geometry("450x500")
    root.maxsize(450, 500)
    root.minsize(450, 500)

    TicTacToeBot(root)
    root.mainloop()
